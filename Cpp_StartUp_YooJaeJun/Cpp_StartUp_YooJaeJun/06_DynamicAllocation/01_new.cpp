#include <iostream>

int main()
{
	// C 언어의 동적할당입니다.
	// C 에서의 동적할당은 함수를 활용합니다.
	// 4byte 공간을 할당하고 int* 형태의 주소로 보냅니다.
	// 동적할당 공간의 주소를 저장하여
	// 간접참조를 통해 동적할당한 공간을 활용합니다.
	int * c_p = (int*)malloc(4);
	printf("동적할당한 주소 : %p \n", c_p);
	// 값을 초기화하지 않는다면 쓰레기값이 들어갑니다.
	printf("동적할당한 공간의 값 : %i \n", *c_p);
	*c_p = 10;
	printf("동적할당한 공간의 값 : %i \n", *c_p);
	free(c_p);	// 동적할당한 공간을 해제합니다.
	c_p = NULL;	// 댕글링 포인터를 방지하기 위해 NULL 을 대입합니다.
				// 기존에 주소를 가리키고 있기 때문에 아무것도 가리키고 있지 않다고 설정

	// Cpp 의 동적할당
	// Cpp 의 동적할당은 new 연산자를 사용합니다.
	// 해제할 시 delete 연산자를 사용합니다.
	// malloc 과 다르게 void* 아닌 자료형의 주소를 반환할 수 있습니다.
	// 또한 동적할당과 동시에 초기화가 가능합니다.
	int* cpp_p = new int(40);	// int 형 공간을 동적할당 합니다.
	printf("동적할당한 주소 : %p \n", cpp_p);
	printf("동적할당한 공간의 값 : %i \n", *cpp_p);
	*cpp_p = 10;
	printf("동적할당한 공간의 값 : %i \n", *cpp_p);
	delete cpp_p;	// 동적할당한 공간을 해제합니다.
	cpp_p = nullptr;	// 댕글링 포인터의 방지로 nullptr 키워드를 사용합니다.		

	//						C						Cpp
	// 형태					malloc(함수)				new(연산자)
	// 해제					free(함수)				delete(연산자)
	// 댕글링 포인터 방지		NULL(매크로상수)			nullptr(키워드)
	// 할당과 동시에 초기화	불가능					가능
	// 자료형의 선언 여부		불가능					가능
	
	return 0;
}